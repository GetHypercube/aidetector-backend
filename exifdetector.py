import argparse
import time
import json
import logging
from PIL import Image
from PIL.ExifTags import TAGS
from utils import (
    setup_logger,
    compress_and_resize_image,
)

logger = setup_logger(__name__)

def process_image(image_path):
    """
    Extracts the EXIF information from an image and checks against a list of synthetic generators
    to determine if it's generated by any of them.

    :param image_path: Path to the image file
    :param generators: List of dicts, each containing the name of the generator and fields to check
    with their expected values or patterns
    :return: Name of the synthetic generator if matched, else None
    """

    start_time = time.time()

    processed_image_path = compress_and_resize_image(image_path)

    logger.info("Image %s resized and compressed", image_path)

    # Read the image data using PIL
    image = Image.open(processed_image_path)
    image.load()

    # Extract other basic metadata
    info_dict = {
        "Filename": image.filename,
        "Image Size": image.size,
        "Image Height": image.height,
        "Image Width": image.width,
        "Image Format": image.format,
        "Image Mode": image.mode,
        "Image is Animated": getattr(image, "is_animated", False),
        "Frames in Image": getattr(image, "n_frames", 1),
    }

    logger.debug("Image metadata")

    for label, value in info_dict.items():
        logger.debug(f"{label:25}: {value}")

    logger.debug("Additional metadata")

    exifdata = image.getexif()
    # Iterating over all EXIF data fields
    for tag_id in exifdata:
        # Get the tag name, instead of human unreadable tag id
        tag = TAGS.get(tag_id, tag_id)
        data = exifdata.get(tag_id)
        # Decode bytes
        if isinstance(data, bytes):
            data = data.decode()
        logger.debug(f"{tag:25}: {data}")

    execution_time = time.time() - start_time

    isSyntheticImage = True

    detection_output = {
        "model": "exif-model-detector",
        "inferenceResults": {
            "isSyntheticImage": isSyntheticImage,
            "executionTime": execution_time,
        },
    }

    return detection_output

# generators = [
#     {
#         "name": "Midjourney",
#         "fields": {
#             "Author": "Midjourney",
#             "Image Description": lambda value: "JOB-ID" in value,
#         },
#     },
#     # Additional synthetic generator checks can be added here
# ]

def main():
    """
    Command-line interface for the GAN detector.
    """
    parser = argparse.ArgumentParser(
        description="EXIF detector inference on a single image"
    )
    parser.add_argument(
        "--image_path", type=str, required=True, help="Path to the image file"
    )
    parser.add_argument(
        "--log_level",
        type=str,
        default="DEBUG",
        help="Logging level (DEBUG, INFO, WARNING, ERROR, CRITICAL)",
    )

    args = parser.parse_args()
    # Configure logger
    log_levels = {
        "DEBUG": logging.DEBUG,
        "INFO": logging.INFO,
        "WARNING": logging.WARNING,
        "ERROR": logging.ERROR,
        "CRITICAL": logging.CRITICAL,
    }
    setup_logger(__name__, log_levels.get(args.log_level.upper(), logging.DEBUG))
    return process_image(args.image_path)


if __name__ == "__main__":
    output = main()
    print(json.dumps(output, indent=4))