from PIL import Image
from PIL.ExifTags import TAGS


def check_synthetic_generator(image_path):
    """
    Extracts the EXIF information from an image and checks against a list of synthetic generators
    to determine if it's generated by any of them.

    :param image_path: Path to the image file
    :param generators: List of dicts, each containing the name of the generator and fields to check
    with their expected values or patterns
    :return: Name of the synthetic generator if matched, else None
    """

    # Read the image data using PIL
    image = Image.open(image_path)
    # Extract other basic metadata
    info_dict = {
        "Filename": image.filename,
        "Image Size": image.size,
        "Image Height": image.height,
        "Image Width": image.width,
        "Image Format": image.format,
        "Image Mode": image.mode,
        "Image is Animated": getattr(image, "is_animated", False),
        "Frames in Image": getattr(image, "n_frames", 1),
    }

    print("Basic metadata:")

    for label, value in info_dict.items():
        print(f"{label:25}: {value}")

    print("Additional metadata:")

    exifdata = image.getexif()
    # Iterating over all EXIF data fields
    for tag_id in exifdata:
        # Get the tag name, instead of human unreadable tag id
        tag = TAGS.get(tag_id, tag_id)
        data = exifdata.get(tag_id)
        # Decode bytes
        if isinstance(data, bytes):
            data = data.decode()
        print(f"{tag:25}: {data}")

# generators = [
#     {
#         "name": "Midjourney",
#         "fields": {
#             "Author": "Midjourney",
#             "Image Description": lambda value: "JOB-ID" in value,
#         },
#     },
#     # Additional synthetic generator checks can be added here
# ]

# Example usage
image_path = "real.jpg"

# The function would be used like this:
check_synthetic_generator(image_path)
